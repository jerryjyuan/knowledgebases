
========================================================
Example Apps: Guide:
	https://jasonwatmore.com/post/2020/07/18/angular-10-user-registration-and-login-example-tutorial
	
	
Tutorial built with Angular 10.0.4

Other versions available:

Angular: Angular 9, 8, 7, 6, 2/5
React: React Hooks + Redux, React + Redux
Vue: Vue.js + Vuex
AngularJS: AngularJS
ASP.NET Core: Blazor WebAssembly
In this tutorial we'll go through an example of how to build a simple user registration, login and user management (CRUD) application with Angular 10.

For an extended version that includes email verification, role based authorization and forgot password functionality see Angular 10 Boilerplate - Email Sign Up with Verification, Authentication & Forgot Password.

The angular app runs with a fake backend by default to enable it to run completely in the browser without a real backend api (backend-less), to switch to a real api you just have to remove or comment out the line below the comment // provider used to create fake backend located in the app module (/src/app/app.module.ts). You can build your own api or hook it up with the ASP.NET Core api or Node.js api available (instructions below).

The project is available on GitHub at https://github.com/cornflourblue/angular-10-registration-login-example.

Styling of the example app is all done with Bootstrap 4.5 CSS, for more info about Bootstrap see https://getbootstrap.com/docs/4.5/getting-started/introduction/.

Here it is in action: (See on StackBlitz at https://stackblitz.com/edit/angular-10-registration-login-example)


Running the Angular 10 Login Tutorial Example Locally
Install NodeJS and NPM from https://nodejs.org.
Download or clone the Angular project source code from https://github.com/cornflourblue/angular-10-registration-login-example
Install all required npm packages by running npm install or npm i from the command line in the project root folder (where the package.json is located).
Start the app by running npm start from the command line in the project root folder, this will compile the Angular app and automatically launch it in the browser on the URL http://localhost:4200.
NOTE: You can also start the app with the Angular CLI command ng serve --open. To do this first install the Angular CLI globally on your system with the command npm install -g @angular/cli.

For more info on setting up an Angular development environment see Angular - Setup Development Environment.


Running the Angular App with an ASP.NET Core 3.1 API
For full details about the example ASP.NET Core API see the post ASP.NET Core 3.1 - Simple API for Authentication, Registration and User Management. But to get up and running quickly just follow the below steps.

Install the .NET Core SDK from https://www.microsoft.com/net/download/core.
Download or clone the project source code from https://github.com/cornflourblue/aspnet-core-3-registration-login-api
Start the api by running dotnet run from the command line in the project root folder (where the WebApi.csproj file is located), you should see the message Now listening on: http://localhost:4000.
Back in the Angular app, remove or comment out the line below the comment // provider used to create fake backend located in the /src/app/app.module.ts file, then start the Angular app and it should now be hooked up with the ASP.NET Core API.

Running the Angular App with a Node.js + MySQL API
For full details about the example Node.js + MySQL API see the post NodeJS + MySQL - Simple API for Authentication, Registration and User Management. But to get up and running quickly just follow the below steps.

Install MySQL Community Server from https://dev.mysql.com/downloads/mysql/ and ensure it is started. Installation instructions are available at https://dev.mysql.com/doc/refman/8.0/en/installing.html.
Download or clone the project source code from https://github.com/cornflourblue/node-mysql-registration-login-api
Install all required npm packages by running npm install or npm i from the command line in the project root folder (where the package.json is located).
Start the api by running npm start from the command line in the project root folder, you should see the message Server listening on port 4000.
Back in the Angular app, remove or comment out the line below the comment // provider used to create fake backend located in the /src/app/app.module.ts file, then start the Angular app and it should now be hooked up with the Node + MySQL API.

Running the Angular App with a Node.js + MongoDB API
For full details about the example Node.js + MongoDB API see the post NodeJS + MongoDB - Simple API for Authentication, Registration and User Management. But to get up and running quickly just follow the below steps.

Install MongoDB Community Server from  https://www.mongodb.com/download-center.
Run MongoDB, instructions are available on the install page for each OS at https://docs.mongodb.com/manual/administration/install-community/
Download or clone the project source code from https://github.com/cornflourblue/node-mongo-registration-login-api
Install all required npm packages by running npm install or npm i from the command line in the project root folder (where the package.json is located).
Start the api by running npm start from the command line in the project root folder, you should see the message Server listening on port 4000.
Back in the Angular app, remove or comment out the line below the comment // provider used to create fake backend located in the /src/app/app.module.ts file, then start the Angular app and it should now be hooked up with the Node + Mongo API.

Deploying the Angular App to AWS
This video shows how to setup a production ready web server from scratch on AWS, then deploy the example Angular app and configure it to run with a real Node.js + MongoDB backend api. The tutorial used in the video is available at Angular + Node.js on AWS - How to Deploy a MEAN Stack App to Amazon EC2.

NOTE: The video shows deploying an earlier (Angular 8) version of the example app, but the steps are exactly the same for the Angular 10 version except for one small detail - the apiUrl has been moved from the webpack config file to the environment config files (/src/environments/environment.ts and /src/environments/environment.prod.ts).


Deploying the Angular App to Microsoft Azure
This video shows how to deploy the Angular app to Azure with a real backend api built with ASP.NET Core and an Azure SQL Server database, the full tutorial is available at Angular + .NET Core + SQL on Azure - How to Deploy a Full Stack App to Microsoft Azure.

NOTE: The video shows deploying an earlier (Angular 8) version of the example app, but the steps are exactly the same for the Angular 10 version except for one small detail - the apiUrl has been moved from the webpack config file to the environment config files (/src/environments/environment.ts and /src/environments/environment.prod.ts).

========================================================
