
#Web - UI Events: KBA (practical-guide-keys) Guide

#Goals:

#Procedure:

##To Enable UI Events: UI Events are main UI data (User Inputs): aka: Events ~= Data

	https://w3c.github.io/uievents/#event-type-click
	https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mouseevents-h3
	
1. User Mouse/Keyboard
2. ...
3. Programmatic Ways
4. New Scenarios: Server-Sent Events:
	With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page
	https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events
	This is one-way connection, so you can't send events from a client to a server
	EventSource
		https://github.com/EventSource/eventsource
	
##To Enable UI Events: HTML / Web DOM (use: HTMl DOM events)

1. Use DOM property: way 1:
		https://www.w3schools.com/jsref/dom_obj_event.asp
		https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click
		DOM-Events: <xxx>
		DOME-Element's method: element.xxx();
		DOM-Element's Attribute: <onxxx>=""
		DOM-Element's Property: element.<onxxx>=""
		DOM onevent handlers: <onxxx>
   Use: <button onclick="handleClick()">
   		<HTML-element>.onxxx = <JS-Function>
		==>elementVar.onclick = function(){myScript};
		==>window.onclick = myFunction;
		==>document.querySelector("button").onclick = function(event) { … }
		==>HTMLElement.click()
		==>document.getElementById("myCheck").click();
		
2. Use DOM property: way 2: property as attribute

	1. Use <HTML-Element onxxx="JS-Code">Element Label</HTML-Element>
		==><element onclick="myScript">
		==><HTML-Element onclick="JS-Code">Element Label</HTML-Element>
		==><input type="checkbox" id="myCheck" onmouseover="myFunction()" onclick="alert('click event occurred')">
	2. Add event listener:
		https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers
		https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick
		==>The onclick property of the GlobalEventHandlers mixin is the EventHandler
		==>add many event handlers of the same/different type(s) to one element
		==>add event listeners to any DOM object not only HTML elements. i.e the window object
	   Use document.getElementById("elementName").addEventListener("xxx", eventHandlerName);
	    ==>elementVar.addEventListener(event, function, useCapture);
		==>document.getElementById("myBtn").addEventListener("click", displayDate);
		==>elementVar.addEventListener("click", function(){ alert("Hello World!"); });
		==>elementVar.addEventListener("click", myFunction);
		==>elementVar.addEventListener("click", function() {myFunction());//call myFunction()
	
##To Enable UI Events: JavaScript

1. Use JSObject.onclick = function(){myScript};
	==>Elements as objects:
		document.querySelector("button").onclick = function(event) { … }
	==>Non-element objects:
		==>window.onclick = myFunction;
		==>document.getElementById("myBtn").onclick = function() {myFunction()};
		==>const xhr = new XMLHttpRequest(); xhr.onprogress = function() { … };

##To Enable UI Events: JavaScript - jQuery:

1. Use $(selector).click()
2. Use $(selector).click(function):	$("p").click(function(){alert("The paragraph was clicked.");});

##To Enable UI Events: Angular

1. Use <html-selector (click)="Angular-Component's-function">
2. Use <AngularComponentSelector [inputField]="HTML-template-data/events">
