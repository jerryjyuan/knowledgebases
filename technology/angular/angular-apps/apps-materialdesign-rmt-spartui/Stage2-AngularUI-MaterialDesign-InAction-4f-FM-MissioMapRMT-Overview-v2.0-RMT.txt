
============================================================
FM: MissionMap/RMT:
	==>2019/09:
	

	*********************************************************************************************************
	*********************************************************************************************************
	*********************************************************************************************************
	
	/////////////////////////////////
	Design/Impl Cycles: for this app:
	/////////////////////////////////
	
		UI Stabilization Parts...
			==>Confidence about UI stabilization
			==>Remove / minimize any difficulties or roadblockers of UI design and display
			==>Ease the subsequent component functionality processes as well
			
			Good:
				How to use mock data to do some good UI
				How to add mock data...: mock data are not just for testing, also for UI...
				How ...
			
			UI Design:
				Data Enabled UI Design
				Business Flows
				
			Summaries:
			
				==>Step 1:	Choose a layout
					==>Header + SideNav + Main-Contents:
						==>
						==>Method 2:	Utilize router module + components
						==>
					==>...
					==>...
			
				==>Step 2:	Design a layout:
					Page Layout Design: Many Layouts and UI insights and practices
					
					==>MD:
						==>
						
					==>Bootstrap4:
						==>For layout: 	mainly: Bootstrap Grid Systems:
										==>Point 1: This is the core part from BT for layout: because of it, 
													so many developers use it because they have read this principle
										==>Point 2: It is pinned for: Mobile-first + RWD: pure responsive design: which is also one of the "Grid" meanings
										==>Point 3: Why do developers always try to use this like col-*-*? ==>because it is always better to use RWD like Grid
													==>Similar to: Angular always Ajax calls with HttpClient...
										==>Point 4: 1) Way 1: col-*-* 2) Way 2: auto-layout by BT default - based on how many columns to percentagized
										==>
					...
				==>Step 3:	Section Design:
	
					==>MD: Containers
	
						==>
						<mat-drawer-container>
							<mat-drawer-contents>
							<mat-drawer>
							<mat-drawer>
						
						
						
				
					==>BS4:	Containers
					
						==>
				
				
				==>Step 4:	Sub-Section Design:
				
					==>Tabs:
						<mat-card>
						<mat-card>
					
					==>
					
				==>Step 5:	Enable Smoothies between Sub-Sections:
				
				
				
				==>Step 6:	Feature-based Design:
				
					==>Modals:
						==>MD Way:
							==>
						==>BT4 Way:
							==>Utilize its own Collapse.js and button and related attributes data-* to implement modal by BT4 way
					
						==>Mozilla Way (MDN/Firefox): https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog
						
						==>HTML/CSS/JS Way:
							https://www.w3schools.com/howto/howto_css_modals.asp:
								==>Point 1: native HTML way (all or many frmwk are wrappers on this...)
								==>Point 2: how to stick out:
											1) JS: Events: action on button: use common HTML's events to add actions to button, etc.
											2) JS: "block/none": appear/disappear
											3) CSS: When "block": z-index + div ==>Sit on top of the main page: popup
								==>Point 3: Steps:
											1) Step 1: write HTML
											2) Step 2: 
								==>
							
					==>Dialogs
					
					==>
					
			
			
			UI Parts: more complicated and advanced than DMT app
				==>Landing Page:
					Angular UI router enabled =>Home Component
				==>Home Component:
					==>html: use: standardized-3-Section design: Header + Side-Nav + Main-Contents

				==>Section-1: Header Section:
							  ==>Component: "app-header"
							  ==>Can enable multiple sub-sections
							  ==>This MissionMap: enable 3 sub-sections:
									1) Main banner and logo section
									2) Main header-menu section:
										==>Menu links: environment settings
										==>Data Items: from JSON data for the app
										==>
									3) AlertMessage section:
										==>Use: global service: NotificationService - with this component: notify and display alert messages
										==>Use: MD's MatSnackBar to enable notification service and displays:
												The alerts message section should be toggled: so using this snackbar is good
										==>Use: Design 3 templates and snackbars: main, info, and error
										==>UI: use <ng-template> to design this message section
										==>
							  
				==>Section-2: Side-Nav:
				
					==>Side Menu Contents 1: DTS Layer: "Duty to Serve Layers"
											 ==>Component: "app-dts-layer"
				
					==>Side Menu Contents 2: Search Areas Data/List/Checkboxes: "Other Geographic Layers"
											 ==>Component: "app-geographic-areas"
					
					==>Side Menu Contents 3: Search Property:	With "Search" functionality: go to "property search results" on the right side sub-section
											 ==>Component: "app-propertysearch"
				
				==>Section-3: Main Contents:
					==>Use MD's drawer container: enable 2 sub-sections: mat-drawe-container <= "sidenav" category
						https://v8.material.angular.io/components/sidenav/api
						==>Sub-Section-1: Google Map API map section
							==>Designed by: mat-drawer-contents:
								==>Enabled: "Search-Address" functionality
								==>Google-Search: Component <"app-search">
								
								==>Map Contents: 
								
						==>Sub-Section-2: Right side results section
							==>Designed by: mat-drawer
							==>Enabled: Component <"app-results">
								==>2 tabs: mat-tab-group / 2 mat-tab sections
								==>Each sub-folder: sub-feature: the results from the 3 main functional services
								==>Each Tab Section:
									==>1) ng-template
									==>2) Component: "app-xxx-results"
													  ==>Quick Start Results: 
														 ==>mat-card
														 ==>mat-card-content
													  ==>property search results:
													  ==>address search results:
													  ==>Selected Results: For functionality: "Selected Point Feature"
															==>This feature: help the usage with "selecting point(s) on map"
															==>UI: mat-card selector sections
															==>
				
					==>To Do: check those containers and contents and drawers with data display and processing
					
	
	/////////////////////////////////
	Functional Flows: for this app:
	/////////////////////////////////
		
			not: page flows
			not: call flows: Java... 
			not: module flows or ...
			not: data flows...
		
		
			==>Core Services:
				==>App"Level"Service:
					Means: Application-Level services
					==>Glue various components
					==>Conduct application-specific and scoped services and data processing
					==>
					
					
	/////////////////////////////////
	Build and Deployment:
	/////////////////////////////////	
	
	ng serve: works
	ng build: works
	ng build --c=production
	ng build --prod="true"
	
	
	*********************************************************************************************************
	*********************************************************************************************************
	*********************************************************************************************************
		
	==>HttpClient: Integration with RESTful API Apps:



========================================================================================================================
========================================================================================================================
========================================================================================================================
