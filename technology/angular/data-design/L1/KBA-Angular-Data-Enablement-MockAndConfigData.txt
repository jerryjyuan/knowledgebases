#Angular Data Enablement: KBA (practical-guide-keys) Guide

#Goals:

#Procedure:

##To Enable Data: list of data enablement scenarios

1. JavaScript Web Storage: Angular is client-side app, so can use Browser/DOM's ways (Browser is like Angular's JVM)
2. Mock Data
3. Local Data
4. Remote Data: RESTful APIs, Database, Server Integration, Cloud Platform
5. 

##To Add Mock/Config Data:

1. Add Mock Data: Testing:
	Add mock data in app locations:
		==><app-root>/src/assets/mock-data/xxx.json
			==>[
			     {},
			     {}
			   ]
			==>{
					"name": "value",
					"xxxResponse": [
						{
							"name1": "value1",
							"data": ["":"", "":""]
						},
						{
						},
					]
			   }
	Enable mock data utility: components and services
		==>mock-xxx-component.ts: create a mock component with empty functions
		==>mock-xxx-service.ts: call this.http.get('mock-data.json')
	Usage 1: xxx.component.spec.ts:
		==>beforeEach(async() => {
			TestBed.configiureTestingModule({
				providers: [
					{provide: XxxService, useClass: MockXxxService),
				]
			});
		}
2. Add Mock Data: Dummy Data during development process
3. Add Mock Data: Normal environment profile data: environment.ts
	export const environment = { host: "", abc: ""};
	import { environment } from '../../environments/environment'; //envrionment.ts
	host = environment.host;
4. Add Mock/Env Data: Service Env Info
	Enabled as a Service class + inject it into components' constructor
	(providedIn: 'root', OR: app.module.ts: providers: [EnvInfo], OR: in some feature-module.ts
	@Injectable
	export class EnvInfo {
		jsonData = {
			data1: {},
			data2: { abc: {a, '', b, ''}, efg: {}, hij: {}}
		}
		==>Nested JSON objects:
			Pros: 1) No need to have JSONArray 2) Can use . to connect all data pieces
			==>this.envInfo.jsonData.data2.abc.a
			==>If it is for JSONArray, it will use this way to locate JSONArray's individual JSON element data:
				this.envInfo.jsonData.data2.find(xxx => xxx.state == 'California').<individual JSON element another-field-name: flower>
					[ { "state": "California", "flower": ""}, {}, {} ]
	}
	Usage 1: Used in any components needed
	Usage 2: Used in any test code: xxx.component.spec.ts
	Usage 3: Used in any httpClient calls: this.envInfo.host + '../restful-api'
5. Add Mock Data: App Config Data
	Add mock/config data in app locations:
		==><app-root>/src/assets/xxx.json
			==>[
			     {},
			     {}
			   ]
			==>{
					"name": "value",
					"settings": [
						{
							"name1": "value options 1",
							"properties": ["":"", "":""]
						}, {
							"name2": "value options 2",
							"properties": ["":"", "":""]						
						},
					]
			   }
	Enable app config service: providedIn: 'root', OR: app.module.ts: providers: [XxxConfigService], OR: in some feature/core-module.ts forRoot
		==>xxx-config-service.ts: import data from '../../assets/xxx.json'; this.appConfig = data;
	Usage 1: enable "preload": export function init_app(xxxConfigService: XxxConfigService) { return () => {return xxxConfig.getConfig();} };
		==>Angular is JS, so define a function is like standalone code
		==>forRoot(): providers: 'useFactory': init_app ==>This will load config when app.module.ts starts instead of each component being loading it
	Usage 2: Inject into Root + import it into each component's constructor:
		For JSONArray, it will use this way to locate JSONArray's individual JSON element data:
		==>this.envInfo.jsonData.data3.find(xxx => xxx.state == 'California').<individual JSON element another-field-name: flower>: [ { "state": "California", "flower": ""}, {}, {} ]
6. Add Mock Data: enabled as bundled Spring Boot local config or @Configuration or application.properties config: return config to Angular http.get('local-call')
7. JSON Data Access:
	import { jsonDataVar } from '../../json/xxx'; //xxx.ts
	host = jsonDataVar.host;