

Spring Guide:
	https://spring.io/guides/tutorials/spring-boot-oauth2/
	https://spring.io/guides/tutorials/spring-security-and-angular-js/
	Spring Boot Application + Multiple UI + Gateway:
		use Spring Session together with Spring Cloud to combine the features of the systems we built in parts II and IV, and actually end up building 3 single page applications with quite different responsibilities. The aim is to build a Gateway (like in part IV) that is used not only for API resources but also to load the UI from a backend server. We simplify the token-wrangling bits of part II by using the Gateway to pass through the authentication to the backends. Then we extend the system to show how we can make local, granular access decisions in the backends, while still controlling identity and authentication at the Gateway. This is a very powerful model for building distributed systems in general,
	
		How do these applications are structured overall?

		==>Main Features:
			==>Maven
			==>Spring Boot
			==>Spring Security + OAuth2
				==>Google Login
				==>Github Login
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-security</artifactId>
				</dependency>
				<dependency>
					<groupId>org.springframework.security</groupId>
					<artifactId>spring-security-oauth2-client</artifactId>
				</dependency>
				<dependency>
					<groupId>org.springframework.security</groupId>
					<artifactId>spring-security-oauth2-jose</artifactId>
				</dependency>			
			==>Spring Data and Spring Cloud
			==>Add an Admin UI as gateway to enable SSO or controlling identity and authentication at the Gateway
			==>Also use: Spring Data - Netflex modules/libs...
				==>Netflex: can do many functions:
					Gateway:
						Zuul Proxy
					Discovery:
						Eureka
					Load-balancing
					Circuit Breaker
					Zuul
					Consul
		==>Sub-Features:
			==>Spring Session:
				Spring Boot and Spring Session work together to connect to Redis and store session data centrally
			==>Spring Cache?
			==>
		==>What are:
			Vallina here?
			Double? - means: google login and github login?
			
		==>App: OAuth Demo Modules:
			==>
			==>
			==>UI: frontend-maven-plugin
					==>Not using AngularCLI
					==>Simple Demo/Guide/ExampleApp UI: no complicated UI page
					==>No MD
					==>Use: HttpClient to call its same domain url internal demo but diffetent ports - enabled by Spring Boot RESTful APIs
						==>UI Call flow:
							==>Enable constructor: call autheticate() method
							==>it uses HttpClient: call backend (same host:port/app-root/) /user API:
								==>The Angular Code / JS code are packaged as its own UI spring boot jar file: but same host/port
								==>After these 3 jar files deployments: Netflex can help find the APIs, ..., through gateway, ...
					==>Use: HttpClient: call API logout:
						==>Same thing as /user API
					==>Then: authserver intercept it: and 
						@@EnableAuthorizationServer
						==>It integrates with Spring Security
						==>Return: token?
					==>Is this the only way: Spring Boot works together with OAuth2 through Spring Security?
						==>Seems like the only way unless you want to add your own code to enable Auth Server... - I do see some online blogs...
						==>This way encapsulates many internal code...
							==>The annotations have many code that other ways can implement tokens... - so this way is simplest way
						
						But other modules in this guide: use more sophisticated code to do more: Google / Github OAuth2...
		
					==>Angular UI: use the HttpClient call's Observable response to set up authenticated status: as login/logout
	
	
		==>App: Single App:
			==>Single Spring Boot Application:
				==>Main Class: Combined "normal @RestController controller class" + "normal @Configuration class": into main class
					==>Enabled as: RESTful APIs + Spring Security / OAuth2 Configurations
					==>Provide RESTful API 1: login API: /user: respond to login API call ==>...
					==>Provide RESTful API 2: login API: /resource: return contents for "Home/Dashboard Page"
				==>App Service Class:
					==>Enable Angular HttpClient calls: to /user and /resource
					==>This service class holds the flag of logged in
				==>UI: Components:
					==>App:
						==>Module: combined the "normal app-routing.module.ts" into "app.module.ts"
						==>UI: Function as main UI landing page:
							==>Menu with buttons
							==>route-outlet	
						==>Enable Angular HttpClient calls: to /logout:	not going through service layer: no need to be processed, just set up the service flag to false
					==>Login:
						==>Call Service class to call: /user
					==>Home/Dashboard
						==>Call Service class to call: /resource	==>if not logged, redirect to login page
			==>This is very simple demo for this app: consolidated classes together
			==>
			
		==>
		
		==>
		
		==>


==>UI Design: With OAuth2: Google/Github:
	https://spring.io/guides/tutorials/spring-boot-oauth2/
	UI:
		==>Angular is not in use
		==>Use: jQuery for UI pages
		==>Use JS and jQuery to do ajax calls: get and post: these calls are similar to Angular service HttpClient calls:
			==>Angular service HttpClient calls: ajax calls by default
			==>Same...
		==>UI: use webjars for jQuery and bootstrap:
			<link rel="stylesheet" type="text/css" href="/webjars/bootstrap/css/bootstrap.min.css"/>
			<script type="text/javascript" src="/webjars/jquery/jquery.min.js"></script>
			<script type="text/javascript" src="/webjars/bootstrap/js/bootstrap.min.js"></script>
			==>Can Angular use this?
				==>Angular Code can also use this in index.html, but it has to be enabled as Spring Boot app - see below sections
		==>Add: Google OAuth2 RESTful API calls
			  <div>
				With GitHub: <a href="/oauth2/authorization/github">click here</a>
			  </div>
			  <div>
				With Google: <a href="/oauth2/authorization/google">click here</a>
			  </div>		
			  ==>These Google/Github URLs are enabled by jar: spring-security-oauth2-client
				==>NOTE: The final path in the URL should match the client registration id in `application.yml
					==>The jar will delegate the above URL to google/github auth server url with the client id and secret id
				==>TIP: Spring Security ships with a default provider selection page that can be reached by pointing to `/login` instead of `/oauth2/authorization/{registrationId}`.
			  ==>This click is optional when app starts for some app: ...
				==>When the spring boot starts with the OAuth client jar on classpath, it automatically picks up the application.properties file and send calls to google/github APIs...
					TBD...
			  
	Main Class:
		==>Spring Boot application:
			==>Main Class: Combined "normal @RestController controller class" + "enable Spring Security": into main class
			==>Enabled as: RESTful APIs + Spring Security / extends WebSecurityConfigurerAdapter
	Conbfigurations:
		The above can be done via Angular UI and Service Calls
		
		==>Google Login:
			<a href="/oauth2/authorization/github">
			
			To use Google's OAuth 2.0 authentication system for login, you must set up a project in the Google API Console to obtain OAuth 2.0 credentials.
				NOTE: https://developers.google.com/identity/protocols/OpenIDConnect[Google's OAuth 2.0 implementation] for authentication conforms to the
						https://openid.net/connect/[OpenID Connect 1.0] specification and is https://openid.net/certification/[OpenID Certified].
				Follow the instructions on the https://developers.google.com/identity/protocols/OpenIDConnect[OpenID Connect] page, starting in the section, "Setting up OAuth 2.0".

				After completing the "Obtain OAuth 2.0 credentials" instructions, you should have a new OAuth Client with credentials consisting of a Client ID and a Client Secret.

		== Setting the redirect URI

			Also, you'll need to supply a redirect URI, as you did for GitHub earlier.

			In the "Set a redirect URI" sub-section, ensure that the *Authorized redirect URIs* field is set to `http://localhost:8080/login/oauth2/code/google`.

		== Adding the Client Registration

			Then, you need to configure the client to point Google.

			UI:
				<div>
					With GitHub: <a href="/oauth2/authorization/github">click here</a>
				</div>
				<div>
					With Google: <a href="/oauth2/authorization/google">click here</a>
						==>When user clicks this link:
							==>It call Google OAuth2 RESTful API (as OAuth2 Auth Server)
								==>When calling, use the following JARs: to function as a Google OAuth2 Auth Server's Resource Server and OAuth2 client:
									<dependency>
										<groupId>org.springframework.security</groupId>
										<artifactId>spring-security-oauth2-client</artifactId>
											==>By adding that, it will secure your app with OAuth 2.0 by default.
									</dependency>
									<dependency>
										<groupId>org.springframework.security</groupId>
										<artifactId>spring-security-oauth2-jose</artifactId>
									</dependency>					
							==>It passes the client id and secret id to the OAuth2 RESTful API:
								==>Why can pass?
									==>Use: spring-security-oauth2-client
							==>Google OAuth2 RESTful API:
								==>Receives this call, and then go to Google's "OAuth 2.0 authentication system for login": validate its client id and secret id
								==>After validated, it returns a page for the user to login:
									==>User enters login to the page and click "login":
									==>Google OAuth2 RESTful API: will validate the login and if authenticated, it returns a token
										and also redirect the request url directly to the: redirect URI
									==>The redirect URI is like the resource server resource url
									==>So the user accesses to this redirect url as the app's landing page
									
							==>This is similar to normal OAuth2 process
							
							But due to some security data retrieved from Google/Github, actually Google/Github are also functioning as a resource server while
								their authentication API url function as Auth Server to provide a token:
									It then uses the access token to ask GitHub for some personal details (only what you permitted it to do), including your login ID and your name.
									In this phase, GitHub is acting as a Resource Server, decoding the token that you send and checking if it gives the app permission to access the user's details.
									If that process is successful, the app inserts the user details into the Spring Security context so that you are authenticated.		
								==>By this concept, their security data are also resource server: using its other API to get token and access its resource data
									==>But these accesses are contolled by their Authentication APIs and other login processes internally
									==>But could pop up some windows or dialogs to ask you for some permissions, etc.
								==>But for this client UI, it is for sure a resource server with the "redirect URI"
							Therefore, we have a OAuth2 token from its Auth Server, and we could have 2 types of resource servers as stated above (in terms of using this token)
				</div>
					Github:
						=== Add a New GitHub App

						To use GitHub's OAuth 2.0 authentication system for login, you must first https://github.com/settings/developers[Add a new GitHub app].

						Select "New OAuth App" and then the "Register a new OAuth application" page is presented.
						Enter an app name and description.
						Then, enter your app's home page, which should be http://localhost:8080, in this case.
						Finally, indicate the Authorization callback URL as `http://localhost:8080/login/oauth2/code/github` and click _Register Application_.

						The OAuth redirect URI is the path in the application that the end-user's user-agent is redirected back to after they have authenticated with GitHub and have granted access to the application on the _Authorize application_ page.

						TIP: The default redirect URI template is `{baseUrl}/login/oauth2/code/{registrationId}`.
						 The *_registrationId_* is a unique identifier for the `ClientRegistration`.

			If you stay logged in to GitHub, you won't have to re-authenticate with this local app, even if you open it in a fresh browser with no cookies and no cached data.
			(That's what Single Sign-On means.)

			TIP: If you are working through this section with the sample application, be sure to clear your browser cache of cookies and HTTP Basic credentials.
			The best way to do that for a single server is to open a new private window.

			**** 
			It's safe to grant access to this sample since only the app running locally can use the tokens and the scope it asks for is limited.
			Be aware of what you are approving when you log into apps like this though:
			They might ask for permission to do more than you are comfortable with (e.g. they might ask for permission to change your personal data, which is unlikely to be in your interest).
			****

			If you look in the browser tools (F12 on Chrome or Firefox) and follow the network traffic for all the hops, you will see the redirects back and forth with GitHub, and finally you'll land back on the home page with a new `Set-Cookie` header.
			This cookie (`JSESSIONID` by default) is a token for your authentication details for Spring (or any servlet-based) applications.

			==>Is the app stealing user's login? depends... ==>If the Google/Github app is real, then this client app might not be able to steal the user login
				but to some degree they can save user's login info as well, ...

			Because Spring Security is built with multiple clients in mind, you can add our Google credentials alongside the ones you created for GitHub:

			.application.yml
			[source,yaml]
			----
			spring:
			  security:
				oauth2:
				  client:
					registration:
					  github:
						clientId: github-client-id
						clientSecret: github-client-secret
					  google:
						client-id: google-client-id
						client-secret: google-client-secret
					
			In the client, the change is trivial - you can just add another link:

			.index.html
			[source,html]
			----
			<div class="container unauthenticated">
			  <div>
				With GitHub: <a href="/oauth2/authorization/github">click here</a>
			  </div>
			  <div>
				With Google: <a href="/oauth2/authorization/google">click here</a>
			  </div>
			</div>
			----

			NOTE: The final path in the URL should match the client registration id in `application.yml`.

			TIP: Spring Security ships with a default provider selection page that can be reached by pointing to `/login` instead of `/oauth2/authorization/{registrationId}`.

			== How to Add a Local User Database

				Many applications need to hold data about their users locally, even if authentication is delegated to an external provider.

				1. Choose a backend for your database, and set up some repositories (using Spring Data, say) for a custom `User` object that suits your needs and can be populated, fully or partially, from external authentication.

				2. Implement and expose `OAuth2UserService` to call the Authorization Server as well as your database.
				Your implementation can delegate to the default implementation, which will do the heavy lifting of calling the Authorization Server.
				Your implementation should return something that extends your custom `User` object and implements `OAuth2User`.

				Hint: add a field in the `User` object to link to a unique identifier in the external provider (not the user's name, but something that's unique to the account in the external provider).


Angular UI + Security:

	==>Maven
	==>Spring Boot + Maven Plugin
	==>AngularCLI: UI + Maven frontend-maven-plugin
		==>
	==>1) Login UI: No.1: Google/Github Login in:
			==>This is the option
			PROS: no need to have a local db, can run Spring Boot quickly
			
		Design:
		
			==>Use OAuth2 and Google/Github login
			
			==>Angular App Landing Page:
				Add Google's client url:  Google OAuth2 RESTful API (as OAuth2 Auth Server)
			
			==>Use the above Spring Boot: can pass the client id and secret id as well...
			
			==>But:
				Spring Boot frontend-maven-plugin: need to place the Angular code into its static web folder place, ...
				==>In this way: the Angular code can function the same as the above jQuery code and UI pages
				==>After login, it goes to the router router-outlet flows to main page
				
				Is the following run automatically packaging Angular "dist" folder into Spring Boot public/static folders in web jar?
				1) Create Angular "dist" folder
				  <execution>
					  <id>npm-build</id>
					  <goals>
						  <goal>npm</goal>
					  </goals>
					  <configuration>
						  <arguments>run-script build</arguments>
					  </configuration>
				  </execution>				
				2) The frontend-maven-plugin will automatically packaging Angular "dist" folder into Spring Boot public/static folders in web jar?
				So the Spring Boot jar can run Angular code like its normal static web code inside its web jar
					==>Previously: maven plugin needs to do a copying from the Angular's dist folder to Spring Boot webapp public/static folder before packaging,
						Now it should be part of the plugin's work
				
				Are there other ways?
				
				
	
	==>2) Login UI: No.2: Login Page:	==>Spring Boot/Security: FileSystem? or: ...
	
	
	
	