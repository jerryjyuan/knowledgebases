
***********************
Excel: Usage 1
***********************
(1) Usage:
	1) Business Teams: use Excel files such as: .xlsm files: create/build business data template files
	2) 

	Examples:
		DMS upload FS statements Excel Files
		
(2) Java Processing

	==>FSConverter.java:
		==>Convert the incoming Excel file contents into an XML data file using XSD rules
		==>Generate an XML file containing all the data fields (abide by XSD rules) from the above Excel file
	==>FSConverter.java:
		==>Should simulate the FS Statement Document upload module like DMS...
		==>DMS:
			==>Upload Excel file via UI: internally convert it into an XML data file
			==>XML data file is passed to SOAP-API's eventService calls to insert the data into DB

	==>FSConverterValidator.java:
	
		import:
			javax.xml
				transform.Source
				transform.stream.StreamSource
				validation.Schema
				validation.SchemaFactory
		Input:
			String fileName
			String xsdFileCommon
			String xsdFileSubModule1
			String xsdFileSubModule2
			==>Depends the XML file being validated involve which nested XSD files: could be more than the 3 XSD files
		Processing:
			Create JDK XMl validator factory: to assemble needed XSD files into a factory pattern
				SchemaFactory factory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");
				//Note: using the Constant name for the above: "http://www.w3.org/2001/XMLSchema": got some issue - not working
			Create Schema: this is the XSD schema: be used for validation of the xml files
				schema = factory.newSchema(new Sources[] {
					new StreamSource(
						new File(
							xxxValidator.class.getClassLoader().getResource(xsdFileCommon).getFile()
					)),
					new StreamSource(
						new File(
							xxxValidator.class.getClassLoader().getResource(xsdFileSubModule1).getFile()
					)),
					new StreamSource(
						new File(
							xxxValidator.class.getClassLoader().getResource(xsdFileSubModule2).getFile()
					))
				});
			Create StreamSource: create the source to point to the XML file that is being validated
				source = new StreamSource(new File(XXXValidator.class.getClassLoader().getResource(fileName).getURI()));
				//getURI(): it is a critical part to make this working
				TODO/TBD:
					//Got some issues below
					source = new StreamSource(new ByteArrayInputStream(xmlString.getBytes()));
			Validate:
				schema.newValidator().validate(source)
			Exception Handling:
				IllegalArgumentException
				SAXException: validation leads to errors thrown here
				IOException
				Exception

	==>Notes:
		==>We can combine both FSConverter.java and FSConverterValidator.java into one single program:
			==>Excel file -> Run: FSConverter.java
				==>become an XML String
				==>Write into the generated XML file
				==>Read this generated XML file -> Run: FSConverterValidator.java
					==>FSConverterValidator.java: will conduct XSD schema validation tests on the generated file
		==>Variation:
			==>Excel file -> Run: FSConverter.java
				==>become an XML String
				==>Directly pass this XML string to: FSConverterValidator.java
					(Omit: Write into the generated XML file)
				==>Run: FSConverterValidator.java
					==>FSConverterValidator.java: will conduct XSD schema validation tests on the generated file
				CONS:
					==>I think there were some issues encountered when directly passing the xml file string to this validator
					==>TBD
		==>Divide the flows into 2 classes: FSConverter.java and FSConverterValidator.java
			==>PROS:
				==>Keep the original class FSConverter.java intact, so any other ones/teams can still take "business as usual"
				   Just like: MSSConversion DCU Utility: keep the original for all other ones/teams as "business as usual"
				   		      or: "Common Scenarios"
				   		      And: take special scenarios to use new MSSConversion DCU Utility
				==>However, taking "business as usual" also depends: especially 
					when some ChnCom's "Horse-running as usual" and "Dance-jumping as usual"
					We need ChnCom finishes their dictatorships in China, and also including HonhKong/Macao and Taiwan scenarios
		
(3) Integration with XML files

	SOAP-API Logic: Requests
		==>Method 1: Client Side Java Code:
						->Client Java Module: Set up fields to Schema-Request Object (which is via new operator or other ways)
						-> Marshalling (to XML) -> Call SOAP-API -> Unmarshalling (to Schema-Object) 
						->Server Processing ->Return Schema-Response Object
		==>Method 2: Client Side Java Code:
						->Client Java Module: 
						-> Call JAXB2 APIs: passing in an XML file containing the field data (the file from teh above step (2))
							(internally:
								JAXB2 APIs: do XML-reader ->Generate the schema-request object (auto-populate all fields from XML)
							)
						-> Generate Schema-Request Object from the XML data contents
						-> Marshalling (to XML) -> Call SOAP-API -> Unmarshalling (to Schema-Object) 
						->Server Processing ->Return Schema-Response Object
		==>...

(4) Validation: XML files

	==>Use: Java JDK APIs: validate XML file and its contents:
		1) Logic 1: XML files have 2 types: XML-Schema(XSD) and DTD
		2) Logic 2: JDK APIs: utilize its XSD standards to validate the XML to be compatible with the XSD files
		3) Logic 3: If the XML files have been validated with XSD files, then no need to send to SOAP-API to do more real testing
					because SOAP-API and implementation use the same XSD and WSDL

(5) Call Java SOAP-APIs

	==>The above JDK validation should be sufficient to certify the XML
	==>Additional Validation Processes:
		==>1) Real Calls: Call EventService SOAP APIs:
			  ==>PROS:
			  ==>CONS:
			  	==>Call flows to DB: DB impacts: CRUD's editing functions: Not good
		==>2) JUnit Tests: EventService SOAP APIs - JUnit Tests: can certify the incoming XML files
			  ==>JUnit Tests: got some blockers: Provider not found or not instantiated: TBD

***********************
Excel: Usage 2
***********************
(1) Usage:
	1) Business Teams: use Excel files such as: .xlsx files: create data migration files

	Examples:
		SM Data Migration Excel Files


***********************
Excel: Usage 3
***********************
(1) Usage:
	1) Business Teams: use Excel files such as: .xlsx or .xls files: create source data files

	Examples:
		Plum Lending Source Files


***********************
Excel: Usage 4
***********************
(1) Usage:
	1) Business Teams: use Excel files such as: .xlsx or .xls files: as input files, and/or as output files

	Examples:
		Worldpay Spring Batch data files...


***********************

***********************


